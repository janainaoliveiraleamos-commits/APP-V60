#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v3.0 - CPL Creator
Gera o protocolo integrado de CPLs devastadores como um m√≥dulo do sistema
"""

import logging
import json
import os
from typing import Dict, Any
from datetime import datetime
from services.enhanced_ai_manager import enhanced_ai_manager
from services.auto_save_manager import salvar_etapa

logger = logging.getLogger(__name__)

async def generate_cpl_module(
    session_id: str,
    sintese_master: Dict[str, Any],
    avatar_data: Dict[str, Any],
    contexto_estrategico: Dict[str, Any],
    dados_web: Dict[str, Any]
) -> Dict[str, Any]:
    """
    Gera o m√≥dulo de CPL como parte do fluxo principal
    
    Args:
        session_id: ID da sess√£o
        sintese_master: S√≠ntese completa da an√°lise
        avatar_data: Dados do avatar gerado
        contexto_estrategico: Contexto estrat√©gico definido
        dados_web: Dados brutos da pesquisa web
        
    Returns:
        Dict com conte√∫do do m√≥dulo CPL gerado
    """
    try:
        logger.info("üéØ Gerando m√≥dulo CPL - Protocolo Integrado de Cria√ß√£o de CPLs Devastadores")
        
        # Preparar contexto rico para a IA
        contexto_para_ia = {
            "sintese_analise": sintese_master,
            "avatar_cliente": avatar_data,
            "contexto_estrategico": contexto_estrategico,
            "dados_pesquisa_web": {k: v for k, v in list(dados_web.items())[:5]} if dados_web else {},
            "termos_chave": contexto_estrategico.get("termos_chave", [])[:10] if contexto_estrategico else [],
            "objecoes_identificadas": contexto_estrategico.get("objecoes", [])[:5] if contexto_estrategico else [],
            "tendencias_mercado": contexto_estrategico.get("tendencias", [])[:5] if contexto_estrategico else [],
            "casos_sucesso_reais": contexto_estrategico.get("casos_sucesso", [])[:5] if contexto_estrategico else []
        }

        prompt = f"""
# M√ìDULO ESPECIALIZADO: PROTOCOLO INTEGRADO DE CRIA√á√ÉO DE CPLs DEVASTADORES

## CONTEXTO ESTRAT√âGICO FORNECIDO:
{json.dumps(contexto_para_ia, indent=2, ensure_ascii=False)}

## INSTRU√á√ïES PARA GERA√á√ÉO:

Com base em TODO o contexto fornecido, crie um protocolo integrado e devastador para cria√ß√£o de sequ√™ncia de 4 CPLs (Copywriting de Alta Performance) que converta de forma excepcional.

### ESTRUTURA OBRIGAT√ìRIA DE SA√çDA (RETORNE APENAS JSON V√ÅLIDO):

```json
{{
  "titulo": "T√≠tulo impactante do protocolo gerado",
  "descricao": "Descri√ß√£o do protocolo e seu impacto estrat√©gico",
  "fases": {{
    "fase_1_arquitetura": {{
      "titulo": "Arquitetura do Evento Magn√©tico",
      "descricao": "Vis√£o geral da arquitetura",
      "estrategia": "Estrat√©gia central da fase",
      "versoes_evento": [
        {{
          "tipo": "Agressiva/Polarizadora|Aspiracional/Inspiradora|Urgente/Escassa",
          "nome_evento": "Nome magn√©tico do evento",
          "justificativa_psicologica": "Justificativa do nome",
          "promessa_central": "Promessa paralisante",
          "mapeamento_cpls": {{
            "cpl1": "Mapeamento psicol√≥gico CPL1",
            "cpl2": "Mapeamento psicol√≥gico CPL2",
            "cpl3": "Mapeamento psicol√≥gico CPL3",
            "cpl4": "Mapeamento psicol√≥gico CPL4"
          }}
        }}
      ],
      "recomendacao_final": "Recomenda√ß√£o de qual vers√£o usar e por qu√™"
    }},
    "fase_2_cpl1": {{
      "titulo": "CPL1 - A Oportunidade Paralisante",
      "descricao": "Descri√ß√£o da CPL1",
      "teasers": [
        {{
          "texto": "Texto do teaser baseado em frases EXATAS coletadas",
          "justificativa": "Por que esta frase √© eficaz"
        }}
      ],
      "historia_transformacao": {{
        "antes": "Situa√ß√£o inicial do avatar (baseada em dados reais)",
        "durante": "Processo de transforma√ß√£o (baseado em casos de sucesso)",
        "depois": "Resultado final transformador (com dados reais)"
      }},
      "loops_abertos": [
        {{
          "descricao": "Descri√ß√£o do loop aberto",
          "fechamento_no_cpl4": "Como ser√° fechado no CPL4"
        }}
      ],
      "quebras_padrao": [
        {{
          "descricao": "Quebra de padr√£o espec√≠fica",
          "base_tendencia": "Tend√™ncia que fundamenta"
        }}
      ],
      "provas_sociais": [
        {{
          "tipo": "Tipo de prova social",
          "dados_reais": "Dados concretos (se dispon√≠veis)",
          "impacto_psicologico": "Impacto esperado"
        }}
      ]
    }},
    "fase_3_cpl2": {{
      "titulo": "CPL2 - A Transforma√ß√£o Imposs√≠vel",
      "descricao": "Descri√ß√£o da CPL2",
      "casos_sucesso_detalhados": [
        {{
          "caso": "Descri√ß√£o do caso espec√≠fico (se dispon√≠vel)",
          "before_after_expandido": {{
            "antes": "Situa√ß√£o antes (com dados)",
            "durante": "Processo aplicado (com termos espec√≠ficos do nicho)",
            "depois": "Resultados alcan√ßados (quantific√°veis)"
          }},
          "elementos_cinematograficos": [
            "Elemento 1 baseado em depoimentos reais",
            "Elemento 2 baseado em depoimentos reais"
          ],
          "resultados_quantificaveis": [
            {{
              "metrica": "M√©trica medida",
              "valor_antes": "Valor inicial (se dispon√≠vel)",
              "valor_depois": "Valor final (se dispon√≠vel)",
              "melhoria_percentual": "Percentual de melhoria (se calcul√°vel)"
            }}
          ],
          "provas_visuais": [
            "Tipo de prova visual 1 (se mencionado)",
            "Tipo de prova visual 2 (se mencionado)"
          ]
        }}
      ],
      "metodo_revelado": {{
        "percentual_revelado": "20-30%",
        "descricao": "Descri√ß√£o do que foi revelado do m√©todo",
        "elementos_principais": [
          "Elemento 1 do m√©todo (termo espec√≠fico do nicho)",
          "Elemento 2 do m√©todo (termo espec√≠fico do nicho)"
        ]
      }},
      "camadas_crencia": [
        {{
          "camada_numero": 1,
          "foco": "Foco da camada",
          "dados_suporte": "Dados que sustentam (se dispon√≠veis)",
          "impacto_psicologico": "Impacto esperado"
        }}
      ]
    }},
    "fase_4_cpl3": {{
      "titulo": "CPL3 - O Caminho Revolucion√°rio",
      "descricao": "Descri√ß√£o da CPL3",
      "nome_metodo": "Nome do m√©todo baseado em termos-chave do nicho",
      "estrutura_passo_passo": [
        {{
          "passo": 1,
          "nome": "Nome espec√≠fico do passo (termo do nicho)",
          "descricao": "Descri√ß√£o detalhada",
          "tempo_execucao": "Tempo estimado de execu√ß√£o (se inferido)",
          "erros_comuns": [
            "Erro comum 1 identificado nas buscas",
            "Erro comum 2 identificado nas buscas"
          ],
          "dica_avancada": "Dica para otimizar resultados (se inferida)"
        }}
      ],
      "faq_estrategico": [
        {{
          "pergunta": "Pergunta real identificada nas obje√ß√µes",
          "resposta": "Resposta convincente baseada em dados",
          "base_dados": "Dados que fundamentam a resposta (se dispon√≠vel)"
        }}
      ],
      "justificativa_escassez": {{
        "limitacoes_reais": [
          "Limita√ß√£o 1 identificada nas pesquisas",
          "Limita√ß√£o 2 identificada nas pesquisas"
        ],
        "impacto_psicologico": "Impacto esperado da escassez"
      }}
    }},
    "fase_5_cpl4": {{
      "titulo": "CPL4 - A Decis√£o Inevit√°vel",
      "descricao": "Descri√ß√£o da CPL4",
      "stack_valor": {{
        "bonus_1_velocidade": {{
          "nome": "Nome do b√¥nus",
          "descricao": "Descri√ß√£o do valor entregue",
          "dados_tempo_economizado": "Dados concretos de tempo economizado (se dispon√≠vel)",
          "impacto_avatar": "Impacto real no avatar"
        }},
        "bonus_2_facilidade": {{
          "nome": "Nome do b√¥nus",
          "descricao": "Descri√ß√£o do valor entregue",
          "friccoes_eliminadas": [
            "Fric√ß√£o 1 eliminada (baseada em obje√ß√µes)",
            "Fric√ß√£o 2 eliminada (baseada em obje√ß√µes)"
          ],
          "facilitadores_inclusos": [
            "Facilitador 1",
            "Facilitador 2"
          ]
        }},
        "bonus_3_seguranca": {{
          "nome": "Nome do b√¥nus",
          "descricao": "Descri√ß√£o do valor entregue",
          "preocupacoes_enderecadas": [
            "Preocupa√ß√£o 1 encontrada",
            "Preocupa√ß√£o 2 encontrada"
          ],
          "mecanismos_protecao": [
            "Mecanismo 1",
            "Mecanismo 2"
          ]
        }},
        "bonus_4_status": {{
          "nome": "Nome do b√¥nus",
          "descricao": "Descri√ß√£o do valor entregue",
          "aspiracoes_atendidas": [
            "Aspira√ß√£o 1 identificada nas redes",
            "Aspira√ß√£o 2 identificada nas redes"
          ],
          "elementos_exclusivos": [
            "Elemento 1",
            "Elemento 2"
          ]
        }},
        "bonus_5_surpresa": {{
          "nome": "Nome do b√¥nus surpresa",
          "descricao": "Descri√ß√£o do valor entregue",
          "elemento_inesperado": "Elemento que n√£o foi mencionado nas pesquisas",
          "valor_percebido": "Alto/M√©dio/Baixo + justificativa"
        }}
      }},
      "precificacao_psicologica": {{
        "valor_base": "Valor definido com base em pesquisa de mercado (se inferido)",
        "comparativo_concorrentes": [
          {{
            "concorrente": "Nome do concorrente (se identific√°vel)",
            "oferta": "Descri√ß√£o da oferta (se identific√°vel)",
            "preco": "Pre√ßo do concorrente (se identific√°vel)",
            "diferencial_posicionamento": "Como se posicionar melhor"
          }}
        ],
        "justificativa_precificacao": "Justificativa baseada em dados reais de valor entregue"
      }},
      "garantias_agressivas": [
        {{
          "tipo_garantia": "Tipo de garantia oferecida",
          "descricao": "Descri√ß√£o detalhada",
          "dados_suporte": "Dados reais que fundamentam a garantia (se dispon√≠veis)",
          "periodo_cobertura": "Per√≠odo de cobertura da garantia",
          "processo_resgate": "Como o cliente resgata a garantia"
        }}
      ]
    }}
  }},
  "consideracoes_finais": {{
    "impacto_previsto": "Impacto estrat√©gico previsto da sequ√™ncia CPL",
    "diferenciais": [
      "Diferencial 1 do protocolo",
      "Diferencial 2 do protocolo"
    ],
    "proximos_passos": [
      "Passo 1 para implementa√ß√£o",
      "Passo 2 para implementa√ß√£o"
    ]
  }}
}}
```

IMPORTANTE:
- Use APENAS dados reais fornecidos no contexto. Se um dado n√£o estiver dispon√≠vel, indique claramente (ex: "N√£o especificado nos dados").
- Foque em insights acion√°veis e estrat√©gias comprovadas.
- A sa√≠da DEVE ser um JSON v√°lido, SEM markdown adicional al√©m do bloco json de sa√≠da.
"""

        # Usar a IA com busca ativa para gerar o conte√∫do do m√≥dulo
        conteudo_modulo = await enhanced_ai_manager.generate_with_active_search(
            prompt=prompt,
            context=json.dumps(contexto_para_ia, indent=2, ensure_ascii=False),
            session_id=session_id,
            max_search_iterations=2  # Menos itera√ß√µes para m√≥dulo espec√≠fico
        )

        # Tentar parsear o JSON retornado
        try:
            modulo_cpl = json.loads(conteudo_modulo)
            logger.info("‚úÖ M√≥dulo CPL gerado com sucesso")

            # Salvar o m√≥dulo gerado
            salvar_etapa("cpl_completo", modulo_cpl, categoria="modulos_principais", session_id=session_id)

            return modulo_cpl

        except json.JSONDecodeError:
            logger.error("‚ùå Erro ao parsear JSON do m√≥dulo CPL")
            # Fallback com estrutura b√°sica
            fallback_cpl = {
                "titulo": "Protocolo de CPLs Devastadores",
                "descricao": "Protocolo gerado com base nos dados estrat√©gicos dispon√≠veis",
                "fases": {},
                "consideracoes_finais": {
                    "impacto_previsto": "N√£o aplic√°vel",
                    "diferenciais": [],
                    "proximos_passos": ["Verificar logs de erro", "Tentar regenerar o m√≥dulo"]
                }
            }
            salvar_etapa("cpl_completo", fallback_cpl, categoria="modulos_principais", session_id=session_id)
            return fallback_cpl

    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar m√≥dulo CPL: {str(e)}")
        # Retornar estrutura m√≠nima em caso de erro
        erro_cpl = {
            "titulo": "Protocolo de CPLs - Erro na Gera√ß√£o",
            "descricao": f"N√£o foi poss√≠vel gerar o protocolo completo devido a: {str(e)}",
            "fases": {},
            "consideracoes_finais": {
                "impacto_previsto": "N√£o aplic√°vel",
                "diferenciais": [],
                "proximos_passos": ["Verificar logs de erro", "Tentar regenerar o m√≥dulo"]
            }
        }
        salvar_etapa("cpl_erro", {"erro": str(e)}, categoria="modulos_principais", session_id=session_id)
        return erro_cpl


# Fun√ß√£o auxiliar para validar estrutura do CPL gerado
def validar_estrutura_cpl(modulo_cpl: Dict[str, Any]) -> bool:
    """
    Valida se a estrutura do m√≥dulo CPL est√° correta
    
    Args:
        modulo_cpl: Dicion√°rio com o m√≥dulo CPL gerado
        
    Returns:
        bool: True se a estrutura estiver v√°lida, False caso contr√°rio
    """
    try:
        # Verificar campos obrigat√≥rios principais
        campos_obrigatorios = ["titulo", "descricao", "fases", "consideracoes_finais"]
        for campo in campos_obrigatorios:
            if campo not in modulo_cpl:
                logger.warning(f"‚ö†Ô∏è  Campo obrigat√≥rio ausente: {campo}")
                return False

        # Verificar estrutura das fases
        fases_esperadas = [
            "fase_1_arquitetura",
            "fase_2_cpl1", 
            "fase_3_cpl2",
            "fase_4_cpl3",
            "fase_5_cpl4"
        ]
        
        fases = modulo_cpl.get("fases", {})
        for fase in fases_esperadas:
            if fase not in fases:
                logger.warning(f"‚ö†Ô∏è  Fase ausente: {fase}")
                return False

        logger.info("‚úÖ Estrutura do m√≥dulo CPL v√°lida")
        return True

    except Exception as e:
        logger.error(f"‚ùå Erro ao validar estrutura CPL: {str(e)}")
        return False


# Fun√ß√£o auxiliar para gerar sum√°rio executivo do CPL
def gerar_sumario_executivo(modulo_cpl: Dict[str, Any]) -> Dict[str, Any]:
    """
    Gera um sum√°rio executivo do m√≥dulo CPL criado
    
    Args:
        modulo_cpl: Dicion√°rio com o m√≥dulo CPL gerado
        
    Returns:
        Dict com sum√°rio executivo
    """
    try:
        fases = modulo_cpl.get("fases", {})
        
        sumario = {
            "titulo_protocolo": modulo_cpl.get("titulo", "N√£o especificado"),
            "total_fases": len(fases),
            "estrategia_principal": fases.get("fase_1_arquitetura", {}).get("estrategia", "N√£o especificada"),
            "evento_recomendado": None,
            "total_bonus": 0,
            "garantias_oferecidas": 0,
            "nivel_complexidade": "M√©dio",
            "tempo_implementacao_estimado": "7-14 dias"
        }
        
        # Extrair evento recomendado
        arquitetura = fases.get("fase_1_arquitetura", {})
        if "versoes_evento" in arquitetura and arquitetura["versoes_evento"]:
            primeiro_evento = arquitetura["versoes_evento"][0]
            sumario["evento_recomendado"] = primeiro_evento.get("nome_evento", "N√£o especificado")
        
        # Contar b√¥nus
        cpl4 = fases.get("fase_5_cpl4", {})
        stack_valor = cpl4.get("stack_valor", {})
        sumario["total_bonus"] = len([k for k in stack_valor.keys() if k.startswith("bonus_")])
        
        # Contar garantias
        garantias = cpl4.get("garantias_agressivas", [])
        sumario["total_garantias"] = len(garantias) if isinstance(garantias, list) else 0
        
        # Avaliar complexidade
        total_elementos = (
            len(fases.get("fase_2_cpl1", {}).get("teasers", [])) +
            len(fases.get("fase_3_cpl2", {}).get("casos_sucesso_detalhados", [])) +
            len(fases.get("fase_4_cpl3", {}).get("estrutura_passo_passo", [])) +
            sumario["total_bonus"]
        )
        
        if total_elementos > 20:
            sumario["nivel_complexidade"] = "Alto"
        elif total_elementos < 10:
            sumario["nivel_complexidade"] = "Baixo"
        
        logger.info("‚úÖ Sum√°rio executivo gerado")
        return sumario
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar sum√°rio executivo: {str(e)}")
        return {
            "titulo_protocolo": "Erro na gera√ß√£o",
            "total_fases": 0,
            "estrategia_principal": "N√£o especificada",
            "erro": str(e)
        }


# Fun√ß√£o principal para executar todo o fluxo de cria√ß√£o do CPL
async def executar_fluxo_completo_cpl(
    session_id: str,
    sintese_master: Dict[str, Any],
    avatar_data: Dict[str, Any],
    contexto_estrategico: Dict[str, Any],
    dados_web: Dict[str, Any]
) -> Dict[str, Any]:
    """
    Executa o fluxo completo de cria√ß√£o do m√≥dulo CPL
    
    Args:
        session_id: ID da sess√£o
        sintese_master: S√≠ntese completa da an√°lise
        avatar_data: Dados do avatar gerado
        contexto_estrategico: Contexto estrat√©gico definido
        dados_web: Dados brutos da pesquisa web
        
    Returns:
        Dict com resultado completo do fluxo CPL
    """
    try:
        logger.info("üöÄ Iniciando fluxo completo de cria√ß√£o do m√≥dulo CPL")
        
        # 1. Gerar o m√≥dulo CPL
        modulo_cpl = await generate_cpl_module(
            session_id=session_id,
            sintese_master=sintese_master,
            avatar_data=avatar_data,
            contexto_estrategico=contexto_estrategico,
            dados_web=dados_web
        )
        
        # 2. Validar estrutura
        estrutura_valida = validar_estrutura_cpl(modulo_cpl)
        
        # 3. Gerar sum√°rio executivo
        sumario = gerar_sumario_executivo(modulo_cpl)
        
        # 4. Compilar resultado final
        resultado_final = {
            "modulo_cpl": modulo_cpl,
            "validacao": {
                "estrutura_valida": estrutura_valida,
                "timestamp_geracao": datetime.now().isoformat(),
                "session_id": session_id
            },
            "sumario_executivo": sumario,
            "metadados": {
                "versao_sistema": "ARQV30 Enhanced v3.0",
                "modulo": "CPL Creator",
                "total_fases_geradas": len(modulo_cpl.get("fases", {})),
                "contexto_utilizado": {
                    "sintese_master": bool(sintese_master),
                    "avatar_data": bool(avatar_data),
                    "contexto_estrategico": bool(contexto_estrategico),
                    "dados_web": bool(dados_web)
                }
            }
        }
        
        # 5. Salvar resultado final
        salvar_etapa("fluxo_cpl_completo", resultado_final, categoria="modulos_principais", session_id=session_id)
        
        logger.info("‚úÖ Fluxo completo de CPL executado com sucesso")
        return resultado_final
        
    except Exception as e:
        logger.error(f"‚ùå Erro no fluxo completo de CPL: {str(e)}")
        return {
            "modulo_cpl": {},
            "validacao": {
                "estrutura_valida": False,
                "erro": str(e),
                "timestamp_geracao": datetime.now().isoformat(),
                "session_id": session_id
            },
            "sumario_executivo": {"erro": str(e)},
            "metadados": {
                "versao_sistema": "ARQV30 Enhanced v3.0",
                "modulo": "CPL Creator",
                "status": "erro"
            }
        }
